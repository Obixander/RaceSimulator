@page "/"
@using Entities
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Services
@inject SignalRService Hub
<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (testdata != null)
{
    <p>@testdata.Name</p>
    <p>@testdata.CurrentLap</p>
    @if (testdata.Racers != null)
    {
        @foreach (var item in testdata.Racers)
        {
            <p>@item.Name</p>
            <p>@item.Placement</p>
            <p>@item.LastLap</p>
            <p>@item.BestLap</p>
        }
    }

}



@code {

    public Race testdata = new();
    private string testing;
    private Guid Uid = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"Component - {Uid} - Rendered");
            await Hub.StartConnectionAsync();
            if (Hub.HubConnection.State == HubConnectionState.Connected)
            {
                Console.WriteLine("Connection made succesfully");
                //subscribes to an event that is triggered when a major event happens and updates the UI
                Hub.HubConnection.On<string>("RaceUpdate", async (race) =>
                {
                    Console.WriteLine("Data received on RaceUpdate");
                    if (race != null)
                    {
                        Race test = JsonConvert.DeserializeObject<Race>(race.ToString()) ?? throw new ArgumentNullException();
                        testdata = new Race(test);
                    }
                    await InvokeAsync(StateHasChanged);
                    await Task.Yield();
                    Console.WriteLine($"Component - {Uid} - Render Queued");
                });
                //subscribes to an event that is triggered when a car crosses the finish line and updates the UI
                Hub.HubConnection.On<string>("CarCrossedLine", async (racers) =>
                {
                    Console.WriteLine("Data received on CarCrossedLine");
                    if (racers != null && testdata != null)
                    {
                        //change to match above later
                        testdata.Racers = JsonConvert.DeserializeObject<List<Car>>(racers.ToString()) ?? throw new ArgumentNullException();
                        Console.WriteLine(testdata.Racers[0].ToString());
                    }
                    await InvokeAsync(StateHasChanged);
                    await Task.Yield();
                    Console.WriteLine($"Component - {Uid} - Render Queued");
                });

                _ = Hub.HubConnection.InvokeAsync<Task>(nameof(IRaceHub.StartRace), "Formula One", 5); //this is done without the await intentionally
                                                                                                       //test method remove later
                testing = "Connection made succesfully";
                await UpdateUi(testing);
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public async Task UpdateUi(string caller)
    {
        testing = caller;
        Console.WriteLine(testing);
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });

    }

}